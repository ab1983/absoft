/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.erp.face;

import com.erp.dao.GenericDao;
import com.erp.dao.UsuarioDao;
import com.erp.entity.*;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.enterprise.context.SessionScoped;
import javax.faces.application.Application;
import javax.faces.application.FacesMessage;
import javax.faces.component.UIComponent;
import javax.faces.context.ExternalContext;
import javax.faces.context.FacesContext;
import javax.inject.Inject;
import javax.inject.Named;
import javax.servlet.http.HttpSession;
import org.primefaces.component.menuitem.MenuItem;
import org.primefaces.component.submenu.Submenu;
import org.primefaces.model.DefaultMenuModel;
import org.primefaces.model.MenuModel;

/**
 *
 * @author Agnaldo
 */
@Named
@SessionScoped
public class GerLoginBean implements Serializable{
    private static final long serialVersionUID = 1L;
    private SecUser user;
    private boolean userLogged = false;
    private MenuModel model;
    private List<AdmService> serviceList;
    private AdmServiceModuleContract serviceModuleContract;
    private List<SecUserAuthorization> userAuthorizationList = new ArrayList();

    public MenuModel getModel() {
        return model;
    }

    public AdmServiceModuleContract getServiceModuleContract() {
        return serviceModuleContract;
    }

    public List<SecUserAuthorization> getUserAuthorizationList() {
        return userAuthorizationList;
    }
    
    public GerLoginBean() {
        user = new SecUser();
    }

    public SecUser getUser() {
        return user;
    }
    
    public boolean isUserLogged() {
        return userLogged;
    }

    public void setUserLogged(boolean userLogged) {
        this.userLogged = userLogged;
    }

    public String doLogin() {
        user = UsuarioDao.findByLoginAndPassword(user.getLogin().toUpperCase(),user.getPassword());
        if (user != null) {
            this.userLogged = true;
            doAuthorization();
            return "/f/index.xhtml";
        } else {
            user = new SecUser();
            this.userLogged = false;
            FacesMessage msg = new FacesMessage(FacesMessage.SEVERITY_ERROR,
                    "Login ou Password incorretos!", "");
            FacesContext.getCurrentInstance().addMessage(null, msg);            
            return null;
        }
    }

    public String doLogout(){
        this.user = new SecUser();
        this.userLogged = false;
        ExternalContext context = FacesContext.getCurrentInstance().getExternalContext(); 
        HttpSession session = (HttpSession) context.getSession(false);  
        session.invalidate();            
        return "/f/login.xhtml";
    }
    private void doAuthorization(){
        try {
            if (!user.isAdministrator() && user.getContract() != null) {
                userAuthorizationList = user.getUserAuthorizationList();
            } else if (user.isAdministrator() && user.getContract() != null) {
                List<AdmServiceModuleContract> moduleList = user.getContract().getServiceModuleContractList();
                for (AdmServiceModuleContract admServiceModuleContract : moduleList) {
                    List<AdmServiceContract> serviceContractList = admServiceModuleContract.getServiceContractList();
                    for (AdmServiceContract admServiceContract : serviceContractList) {
                        SecUserAuthorization userAuthorization = new SecUserAuthorization();
                        userAuthorization.setServiceContract(admServiceContract);
                        userAuthorizationList.add(userAuthorization);
                    }
                }
            } else if (user.isAdministrator() && user.getContract() != null) {
                serviceList = (List<AdmService>) (Object) GenericDao.findAll("findAllAdmService");
                for (AdmService admService : serviceList) {
                    SecUserAuthorization userAuthorization = new SecUserAuthorization();
                    AdmServiceContract serviceContract = new AdmServiceContract();
                    serviceContract.setService(admService);
                    userAuthorization.setServiceContract(serviceContract);
                    userAuthorizationList.add(userAuthorization);
                }
            }
            FacesContext facesContext = FacesContext.getCurrentInstance();
            Application application = facesContext.getApplication();
            ELContext elContext = facesContext.getELContext();
            ExpressionFactory expressionFactory = application.getExpressionFactory();

            //MethodExpression methodExpression = expressionFactory.createMethodExpression(elContext, "#{secUserBean.indexBean()}", String.class, new Class[0]);

            model = new DefaultMenuModel();

            //MenuItem item = new MenuItem();
            Submenu startSubmenu = new Submenu();
            startSubmenu.setLabel("Inicial");
            startSubmenu.setIcon("ui-icon-home");
            startSubmenu.setStyle("height: 20px;top:0;");
            startSubmenu.setStyleClass("botaoMenu");
            model.addSubmenu(startSubmenu);
            MenuItem openItem = new MenuItem();
            openItem.setValue("Abrir");
            openItem.setActionExpression(expressionFactory.createMethodExpression(elContext, "#{baseBean.main()}", String.class, new Class[0]));
            openItem.setUpdate(":basePanel");
            startSubmenu.getChildren().add(openItem);
            for (int i = 0; i < userAuthorizationList.size(); i++) {
                SecAuthorization auth = userAuthorizationList.get(i).getAuthorization();
                AdmService admService = userAuthorizationList.get(i).getServiceContract().getService();
                String[] nivelArray = admService.getName().split(">");
                Submenu firstSubmenu = new Submenu();
                MenuItem item = new MenuItem();
                Submenu prevMenu = null;
                String compId = "";
                for (int j = 0; j < nivelArray.length; j++) {
                    String string = nivelArray[j];
                    compId += string.replaceAll(" ", "-");
                    if (j == nivelArray.length - 1) {
                        item.setValue(string);
                        item.setActionExpression(expressionFactory.createMethodExpression(elContext, admService.getMainAddress().replace("(", "(" + auth.isReadOnly()), String.class, new Class[0]));
                        item.setUpdate(":basePanel");
                        //item.setIncludeViewParams(auth.isReadOnly());
                        //item.
                        prevMenu.getChildren().add(item);
                        //firstSubmenu.getChildren().add(item);
                    } else if (j == 0) {

                        firstSubmenu.setLabel(string);
                        firstSubmenu.setId(compId);
                        prevMenu = firstSubmenu;
                    } else {
                        Submenu centerSubmenu = new Submenu();
                        centerSubmenu.setLabel(string);
                        centerSubmenu.setId(compId);
                        UIComponent comp = startSubmenu.findComponent(compId);

                        for (UIComponent compAux : firstSubmenu.getChildren()) {
                            if (compAux instanceof Submenu) {
                                Submenu sub = (Submenu) compAux;
                                if (sub.getLabel().equals(string)) {
                                    comp = sub;
                                    break;
                                }
                            }
                        }
                        if (comp == null) {
                            firstSubmenu.getChildren().add(centerSubmenu);
                            comp = centerSubmenu;
                        }
                        if (comp instanceof Submenu) {
                            prevMenu = (Submenu) comp;
                        }
                        /*
                         * if (centerSubmenu.getLabel() == null ||
                         * centerSubmenu.getLabel().isEmpty()) {
                         * centerSubmenu.setLabel(string);
                         * firstSubmenu.getChildren().add(centerSubmenu); }
                         */
                    }
                }
                if (nivelArray.length > 1) {
                    UIComponent compAux = null;
                    for (UIComponent comp : startSubmenu.getChildren()) {
                        if (comp instanceof Submenu) {
                            Submenu sub = (Submenu) comp;
                            if (sub.getLabel().equals(firstSubmenu.getLabel())) {
                                sub.getChildren().addAll(firstSubmenu.getChildren());
                                compAux = sub;
                                break;
                            }
                        }
                    }
                    if (compAux == null) {
                        startSubmenu.getChildren().add(firstSubmenu);
                    }
                } else {
                    startSubmenu.getChildren().add(item);
                }
            }
            MenuItem exitItem = new MenuItem();
            exitItem.setValue("Sair");
            exitItem.setActionExpression(expressionFactory.createMethodExpression(elContext, "#{gerLoginBean.doLogout()}", String.class, new Class[0]));
            startSubmenu.getChildren().add(exitItem);
        } catch (Throwable ex) {
            Logger.getLogger(GerMenuBean.class.getName()).log(Level.SEVERE, null, ex);
        }
    
        
    }
}
