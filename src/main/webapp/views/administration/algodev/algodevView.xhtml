<?xml version='1.0' encoding='UTF-8' ?>
<!DOCTYPE composition PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html  xmlns="http://www.w3.org/1999/xhtml" xmlns:ui="http://java.sun.com/jsf/facelets"
       xmlns:h="http://java.sun.com/jsf/html"
       xmlns:f="http://java.sun.com/jsf/core"
       xmlns:p="http://primefaces.org/ui"
       xmlns:c="http://java.sun.com/jsp/jstl/core">
    <script>var loaded = false;
        var page = null; 
        var formOld = "";
        var formOld2 = "";
        var beanMapCache = new Array();
        var timeoutVar = null;
        </script>     
    <h:form>  
    	<f:event type="preRenderComponent" listener="#{app.initBrowserCache()}"/>
    	<f:event type="preRenderComponent" listener="#{app.setIdxBrowserCached('')}"/>
    	<p:remoteCommand rendered="true" name="updateCache" immediate="true" update="@form" oncomplete="updateCurrentForm()"/>
    	<script>
    		beanMapCache = new Array();
    	</script>
    </h:form>
    <h:form prependId="false" acceptcharset="ISO-8859-1" styleClass="ui-algo-container-form">    
        <p:remoteCommand rendered="true" name="updateCurrentForm" immediate="true" update="@form"/>
        <p:remoteCommand rendered="false" name="updateBasePanel" update=":basePanel"/>  
        <p:remoteCommand name="updateStartPage" actionListener="#{app.updateContainerPage()}" update="@form"/>  
        <p:remoteCommand name="eventBeanRc" actionListener="#{app.eventBean()}" immediate="false" update="@form" oncomplete="oncomplete(xhr, status, args)"/>
        <p:remoteCommand name="eventPageRc" actionListener="#{app.eventBean()}" immediate="true" update="@form"/>
        <p:remoteCommand name="eventCallRc" actionListener="#{app.eventBean()}" immediate="true"/>
        <script type="text/javascript">
            /* <![CDATA[ */
            var idxCached = '#{app.idxBrowserCached}';
            function oncomplete(xhr, status, args){
            	var call = args.callback;
            	if(call!==null && call !== undefined && call !== ""){
        	        timeoutVar = window.setTimeout(function(call) {
    	            	//if(isFormChanged()){
    	                		$(document).ready(function() {
    	                			//alert(1);
    	                			eval(call);           		            			
    	                		});  	            	
    	            	//}                
        	        }, 500,call);                		
            		
            	}
				//log(call);            	
            }
            function init1() {

                //alert($('.ui-growl').html());
                if (page !== '#{app.containerPage}') {
                    page = '#{app.containerPage}';
                    window.setTimeout(function() {
                        if ($('.ui-growl').html() !== '') {
                            //alert($('.ui-growl').html() + '1');
                            window.setTimeout(function() {
                                //updateCurrentPage();
                            }, 1000);
                        } else {
                            //updateCurrentPage();
                        }
                    }, 100);
                }
            }
            function isFormChanged(){
            	log('formChanged');
            	var formCloned = $('.ui-algo-container-form').clone(true);
            	var els = formCloned.children().remove("input[name='javax.faces.ViewState']");;            	              	
                var formNew = $(formCloned).serialize();  
				
                if(formNew !== formOld && formNew!== formOld2){
                	formOld2 = formOld;
    	            formOld = formNew;  
    	            return true;
                }else{
                	return false;
                }        	
            }
            function clearFormChanged(){
	            formOld = "";
	            formOld2 = "";            	
            }
            function restartFormChanged(){
            	clearFormChanged();
            	isFormChanged();
            }            
            function eventPage(call) {
                //if (page !== '#{app.containerPage}') {
                    //page = '#{app.containerPage}';
                //}
    	        timeoutVar = window.setTimeout(function(call) {
	            	if(isFormChanged()){
	                		$(document).ready(function() {
	                			//alert(1);
	    		           		eventPageRc([{name: 'call', value: call}]);            		            			
	                		});  	            	
	            	}                
    	        }, 500,call);              		
            }             
            function eventBean(call) {
            	if(timeoutVar!==null){
            		clearTimeout(timeoutVar);
            		//alert('1');
            	}            	
            	if(isFormChanged()){
            		$(document).ready(function() {
		           		eventBeanRc([{name: 'call', value: call}]);            		            			
            		});
            	}
            }
            function eventBeanWait(call,timeout) {
            	if(timeoutVar!==null){
            		clearTimeout(timeoutVar);
            	}
            	
            	if(timeout===undefined){
            		timeout = 2000;
            	}
            		//alert('1');
            		$(document).ready(function() {
            			timeoutVar = window.setTimeout(function(call) {
		            	if(isFormChanged()){
		           			eventBeanRc([{name: 'call', value: call}]);            		            			
		           			timeoutVar = null;
		           			//alert('2');
		            	}
        	            }, timeout,call);             			
            		});
            }    
            function eventCall(call){
            	eventCallRc([{name: 'call', value: call}]);    
            }            
            function focusBean(element) {
	            window.setTimeout(function() {
	                $(element).focus();
	            }, 1000);            
            }
            function reloadSelectsByJS(){
	            var selects = $('.ui-algo-container').find('select');
	            var selectsUI = $('.ui-selectonemenu-items-wrapper').find('ul');
	            var idxSel = 0;
	            var page1 = page;
	            //alert(selectsUI.length);
	        	if(typeof beanMapCache[page1]==='undefined'){
	            	beanMapCache[page1] = new Array();	            		
	        	}            
	            selects.each(function() {
	            	//alert(beanMapCache[page]);   
	            	//alert(typeof beanMapCache[page]!=='undefined');
	            	//alert(idxSel);
	            	//alert(idxCached.indexOf('false')===-1);
	            	if(idxCached.indexOf('false')===-1){
			            var idEl = $(this).attr('id').replace('_input','');
			            var idWdEl = 'widget_'+idEl.replace(':','_');
			            try {
				            var elWd = eval(idWdEl);
			            	
				            if(typeof beanMapCache[page1][idxSel]!=='undefined'){
				            	//alert(beanMapCache[page][idxSel]);
				            	//$(this).empty();
					            //$(this).append(beanMapCache[page1][idxSel]);
					            ///$(selectsUI[selectsUI.length - selects.length + idxSel]).empty();
					            //$(selectsUI[selectsUI.length - selects.length + idxSel]).html(beanMapCache[page1][idxSel+'-ui']);
					            //var elWdOld = beanMapCache[page1][idxSel+'-wd'];			            
					            //elWd.preShowValue = elWd.options.filter(":selected");
					            
					            //var panelId = elWd.jqId + '_panel';
					            var input = $(elWd.jqId + '_input');
					            //var focusInput = $(elWd.jqId + '_focus');
					            //var label = elWd.jq.find('.ui-selectonemenu-label');
					            //var menuIcon = elWd.jq.children('.ui-selectonemenu-trigger');
					            //var panel = elWd.jq.children(this.panelId);
					            //var disabled = elWd.jq.hasClass('ui-state-disabledc');
					            //var itemsWrapper = elWd.panel.children('.ui-selectonemenu-items-wrapper');
					            var itemsContainer = elWd.itemsWrapper.children('.ui-selectonemenu-items');
					            //itemsContainer.empty();
					            var selected = input.val();
					            //if(input.val()===null || input.val()===''){
				            	
					            itemsContainer.html(beanMapCache[page1][idxSel+'-ui'].clone());
					            //elWd.items = beanMapCache[page1][idxSel+'-ui'];
					           // var items = elWd.itemsContainer.find('.ui-selectonemenu-item');
					            //var options = elWd.input.children('option');
					            //input.empty();
					            input.html(beanMapCache[page1][idxSel].clone());
					            
					            
						        input.val(selected);
					            restartSelect(elWd,elWd.cfg);
					            //elWd.options = elWd.options.clone().empty();//beanMapCache[page1][idxSel];
					            elWd.bindEvents();
				                   
					            elWd.bindConstantEvents();
				                   
					            elWd.setupDialogSupport();
					            //elWd.input.data(PrimeFaces.CLIENT_ID_DATA, elWd.id);
					            //}else{
					            	//alert(input.val());
					            //}
					            //$(input).find('option[value=\"'+input.val()+'\"]').attr('selected',true);
					            //var cfg.effect = elWd.cfg.effect||'fade';
					            //var cfg.effectSpeed = elWd.cfg.effectSpeed||'normal';
					            //var optGroupsSize = elWd.itemsContainer.children('li.ui-selectonemenu-item-group').length;
					            
					            
					            
					            //elWd.options.empty();
					            //elWd.options.append(beanMapCache[page1][idxSel]);
					            //var preShow = elWd.preShowValue;
				            	
					            /*
					            //$(function(){
					            	PrimeFaces.cw('SelectOneMenu',idWdEl,{id:idEl,filter:true,filterMatchMode:'contains',			            	
					            	behaviors:{change:function(event,ext){
					            		PrimeFaces.bc(elWd,event,ext,['PrimeFaces.ab({source:'+idEl+',event:\'valueChange\',process:'+idEl+'}, arguments[1]);']);
					            		}
					            }			            
					            });
					            	//});
					            */
					           
				            }else{
				            	//alert(page+2);
				            	beanMapCache[page1][idxSel] = elWd.options.clone();//$(this).children();
				            	beanMapCache[page1][idxSel+'-ui'] = elWd.items.clone();//$(selectsUI[selectsUI.length - selects.length + idxSel]).children();
				            	//beanMapCache[page1][idxSel+'-wd'] = elWd.jq.clone();
				            	//alert(page+3);
				            }						
			            idxSel++;
			            //alert(idxSel+"/"+selects.length);
						} catch (e) {
							//log("##Stack do Erro:"+e.stack);
							log("reloadSelectsByJS:"+e);
						}
	            	}
	            });
            	
            }   
            function log(msg) {
                setTimeout(function() {
                    throw new Error(msg);
                }, 0);
            }            
            function restartSelect(_this,cfg) {
                //_this._super(cfg);
               	_this.unbindEvents();
                _this.panelId = _this.jqId + '_panel';
                _this.input = $(_this.jqId + '_input');
                _this.focusInput = $(_this.jqId + 
                		'_focus');
                _this.label = _this.jq.find('.ui-selectonemenu-label');
                _this.menuIcon = _this.jq.children('.ui-selectonemenu-trigger');
                _this.panel = $(_this.panelId);//_this.panel = _this.jq.children(_this.panelId);
                //alert(_this.panelId+_this.jq.children(_this.panelId))
		
                _this.disabled = _this.jq.hasClass('ui-state-disabled');
                _this.itemsWrapper = _this.panel.children('.ui-selectonemenu-items-wrapper');
                _this.itemsContainer = _this.itemsWrapper.children('.ui-selectonemenu-items');
                _this.items = _this.itemsContainer.find('.ui-selectonemenu-item');
                //alert(_this.items.length);
                _this.options = _this.input.find('option');
                _this.preShowValue = _this.input.find('option')[0];
                _this.cfg.effect = _this.cfg.effect||'fade';
                _this.cfg.effectSpeed = _this.cfg.effectSpeed||'normal';
                _this.optGroupsSize = _this.itemsContainer.children('li.ui-selectonemenu-item-group').length;

                var $_this = _this,
                selectedOption = _this.options.filter(':selected');
                //disable options
                _this.options.filter(':disabled').each(function() {
                    $_this.items.eq($(this).index()).addClass('ui-state-disabled');
                });
               
                //triggers
                _this.triggers = _this.cfg.editable ? _this.jq.find('.ui-selectonemenu-trigger') : _this.jq.find('.ui-selectonemenu-trigger, .ui-selectonemenu-label');
               
                //activate selected
                if(_this.cfg.editable) {
                    var customInputVal = _this.label.val();
                   
                    //predefined input
                    if(customInputVal === selectedOption.text()) {
                        _this.highlightItem(_this.items.eq(selectedOption.index()));
                    }
                    //custom input
                    else {
                        _this.items.eq(0).addClass('ui-state-highlight');
                        _this.customInput = true;
                        _this.customInputVal = customInputVal;
                    }
                }
                else {
                    _this.highlightItem(_this.items.eq(selectedOption.index()));
                }
		/*
                   */    
                //mark trigger and descandants of trigger as a trigger for a primefaces overlay
                _this.triggers.data('primefaces-overlay-target', true).find('*').data('primefaces-overlay-target', true);


                //Append panel to body
                $(document.body).children(_this.panelId).remove();
                _this.panel.appendTo(document.body);
               
                //pfs metadata
                _this.input.data(PrimeFaces.CLIENT_ID_DATA, _this.id);
               
                _this.renderDeferred();
                
                //if(!_this.disabled) {            
                   //_this.bindEvents();
                   
                   //_this.bindConstantEvents();
                   
                   //_this.setupDialogSupport();
                //}
            }
           
            //init1();
            /* ]]> */
        </script>
        <p:panel style="width: #{baseBean.expandedWindow?'1250px':'1024px'};height: 490px;font-size:11px;" styleClass="ui-algo-container ui-algo-container-app" >

        </p:panel>          
        <!-- 
        <f:event type="postAddToView" listener="#{(app.setAlgoContainer())}"/>
        <f:event type="postAddToView" listener="#{(app.setAppBean(algoContainerObj.clientId))}"/>
        <f:event type="preRenderView" listener="#{(app.setAppBean(algoContainerObj.clientId))}"/>
        <f:phaseListener binding="#{app.getPhaseListenerImpl()}">
        <f:phaseListener binding="#{app.getPhaseListener()}"/> 
        <f:event type="preRenderComponent" listener="#{(app.setAppBean(algoContainerObj.clientId))}"/>
		<f:event type="preRenderComponent" listener="#{(app.setContainerClass('ui-algo-container-app'))}"/>  
        <f:event type="preRenderComponent" listener="#{(app.updateContainerPage())}"/>        
         -->
         <f:event type="preRenderComponent" listener="#{app.preRenderComponent}"/>
         
        <p:dialog onShow="prepareExportHtmlToPdf('.ui-algo-container .ui-datatable-tablewrapper');" widgetVar="exportTableDlg" header="Selecione o Formato para Exportação" modal="false" dynamic="true" resizable="false">
            <h:commandLink rendered="false">  
                <p:graphicImage value="resources/images/excel.png" />  
                <p:dataExporter type="xls" target="#{app.elementSelected.id}" fileName="#{app.requirement.requirementName}" />  
            </h:commandLink>  

            <h:commandLink rendered="false" charset="UTF-8" actionListener="#{app.exportHtmlToPdf()}" target="_blank">   
                <p:graphicImage value="resources/images/pdf.png" />  
            </h:commandLink>  

            <h:commandLink  actionListener="#{app.exportPdf()}" target="_blank">   
                <p:graphicImage value="resources/images/pdf.png" />  
            </h:commandLink>  

            <h:commandLink>  
                <p:graphicImage value="resources/images/csv.png" />  
                <p:dataExporter type="csv" target="#{app.elementSelected.id}" fileName="#{app.requirement.requirementName}" />  
            </h:commandLink>  

            <h:commandLink>  
                <p:graphicImage value="resources/images/xml.png" />  
                <p:dataExporter type="xml" target="#{app.elementSelected.id}" fileName="#{app.requirement.requirementName}" />  
            </h:commandLink>        
        </p:dialog>               
        <input type="hidden" name="html" id="html" value="" />
        <input type="hidden" name="css" id="css" value=""/>

        <p:remoteCommand immediate="false" name="exportHtmlToPdf" actionListener="#{(app.exportHtmlToPdf)}"/>
        <p:remoteCommand immediate="false" name="exportPdf" actionListener="#{(app.exportPdf())}"/>
        <p:commandButton value="Atualizar" rendered="false" immediate="true" oncomplete="updateStartPage();" />

        <p:dialog widgetVar="pdfViewer" dynamic="true" rendered="false">
            <p:media value="#{app.pdfFileStr}" player="pdf" width="100%" height="300px">  
                Your browser can't display pdf, <h:outputLink value="#{app.pdfFileStr}">click</h:outputLink> to download pdf instead.  
            </p:media>            
        </p:dialog>
        <style>
            .ui-algo-element-container{
                position: relative !important;
            }
            .ui-algo-element-value{
                /*position: absolute !important;*/
            }
        </style>
        <script type="text/javascript">
            /* <![CDATA[ */                                    
            var tabindex = null;
            var firstindex = null;            
            function findIndex(elements) {
                elements.each(function() {
                    if ($(this).children().length > 0) {
                        findIndex($(this).children());
                    }
                    if (this.type !== "hidden" && this.value === '') {
                        if (firstindex === null) {
                            firstindex = this;
                        }
                        if ((tabindex === null && $(this).attr("tabindex") !== undefined) || parseFloat($(this).attr("tabindex")) < parseFloat($(tabindex).attr("tabindex"))) {
                            tabindex = this;
                            
                            window.setTimeout(function(tabindex) {
                            	//alert(tabindex);
                                $(tabindex).focus();
                            }, 100,tabindex);
                        }
                    }
                    //alert($(tabindex).attr("tabindex"));
                });
            }
            function init2() {
                var elements = $('.ui-algo-container').find('[tabindex]');
                findIndex(elements);
                if (tabindex === null && firstindex !== null) {
                	window.setTimeout(function(firstindex) {
                        $(firstindex).focus();
                    }, 100,firstindex);
                }
                //alert($(tabindex).attr("tabindex"));
                if (!loaded) {
                    //updateCurrentForm();
                    //updateCurrentConteiner();
                    //updateBasePanel();
                    loaded = true;
                }
            }   
            function formIsEmpty(){
            	var isEmpty = true;
            	var elements = $('.ui-algo-container').find('[tabindex]');
            	elements.each(function() {
                    if ($(this).children().length > 0) {
                        //findIndex($(this).children());
                    }
                    if (this.value !== '') {
                    	isEmpty = false;
                    	return;
                    }
            	});
            	return isEmpty;
            }
            if(formIsEmpty()){
	            init2();            	
            }
            if (page !== '#{app.containerPage}') {            	
	            page = '#{app.containerPage}';
	            clearFormChanged();
	            init2();   
            }
    		$(document).ready(function() {
    			reloadSelectsByJS();         		            			
    		});              
        	window.setTimeout(function() {
	           //reloadSelectsByJS();
	           //alert('oi2');
            }, 100);
            /* ]]> */
        </script>     
        <script>
            function generateCSS() {
                var cssStr = "";
                $("link[type='text/css']").each(function() {
                    //cssStr += $(this)[0].outerHTML;
                    cssStr += $(this).attr('href') + ";";
                });
                return cssStr;
            }
            function prepareExportHtmlToPdf(contentClass) {
                $(contentClass + ' input').remove();
                $(contentClass + ' table').css("font-size", "10px");
                $(esc('html')).val($(contentClass).html());
                //$('.ui-algo-container input').remove();
                //$(esc('html')).val($('.data-list')[0].outerHTML);
                $(esc('css')).val(generateCSS());
                //'.ui-algo-container .ui-datatable-tablewrapper'
                //alert($(esc('tabView:css')).val());
            }
            // Add the $() function
            $ = jQuery;
            
            // Now you can use it
                 $(document).ready(function() {
     				 formatMaskFields("#{msg['dateMask']}","#{msg['timeMask']}",'#{msg.thousandsSeparator}','#{msg.decimalSeparator}');                        	
                 });
        </script>        
        <style>
        	#{app.requirement.requirementStyle}
        </style>
    </h:form>
    <h:form styleClass="handleFileDlgx"> 
        <p:dialog header="#{msg['FILE']}" onHide="updateStartPage();" widgetVar="uploadFileWv" visible="false" modal="false" dynamic="false" resizable="false">
            <h:panelGrid columns="2" styleClass="handleFileDlg">
                <p:fileUpload sizeLimit="15000000" invalidSizeMessage="Tamanho do Arquivo Inválido! Limite de 15MB excedido." fileUploadListener="#{(app.handleFileUpload)}" mode="advanced" dragDropSupport="false" auto="true" uploadLabel="#{msg.upload}" cancelLabel="#{msg.cancel}" label="#{msg.include}"/>
                <h:panelGroup styleClass="handleFileDlg" style="text-align: center;display: table;" >
                    <p:outputLabel styleClass="handleFileDlg" value="#{app.fileDownload!=null?app.fileDownload.name:''}"/>
                    <br/>
                    <p:graphicImage  binding="#{handleFileDlgImg1}" styleClass="handleFileDlgImg" value="#{app.fileDownload}" height="100" width="80">
                    </p:graphicImage>
                    <br/>
                    <p:commandButton widgetVar="downloadBtnWv" value="#{msg.download}" ajax="false" onclick="PrimeFaces.monitorDownload(start, stop)"   
                                     icon="ui-icon ui-icon-arrowthickstop-1-s">  
                        <p:fileDownload value="#{app.fileDownload}" />  
                    </p:commandButton>  
                    <h:commandLink target="_blank" onclick="PrimeFaces.monitorDownload(start, stop)">
                        <p:button widgetVar="downloadBtnWv2" value="#{msg.open}"  
                                  icon="ui-icon ui-icon-arrowthickstop-1-s" >  
                        </p:button>            
                        <p:fileDownload value="#{app.fileDownload}" contentDisposition="inline"/>                          
                    </h:commandLink>   
                </h:panelGroup>
            </h:panelGrid>
        </p:dialog>
        <!--f:event rendered="false" type="preRenderComponent" listener="#{app.setFilePreviewEvt(baseBean.getComponentEvent(handleFileDlgImg1))}"/-->
        <p:dialog modal="true" widgetVar="statusDialog" header="Status" draggable="false" closable="false" resizable="false">  
            <p:graphicImage value="/resources/images/ajaxloadingbar.gif" />  
        </p:dialog>      
        <p:remoteCommand name="updateHandleFileDlg" update="@(.handleFileDlg)" immediate="true" onstart="updateFilePreview();" oncomplete="setFilePreview();"/>   
        <p:remoteCommand name="updateHandleFileDlg3" update="@(.handleFileDlg3)" immediate="true"/>  
        <p:remoteCommand name="updateFilePreview"  immediate="true" update="@(.handleFileDlgImg)"/>   
        <p:remoteCommand name="setFilePreview" actionListener="#{(app.setFilePreview(handleFileDlgImg1))}" immediate="false"/>   
        <p:remoteCommand name="sendEmailRc" actionListener="#{app.sendEmail()}" immediate="true"/>   
        <p:remoteCommand name="randomSortRc" actionListener="#{app.randomSort()}" immediate="false" oncomplete="resetFormRc()"/>   
        <p:remoteCommand name="resetFormRc" actionListener="#{app.resetForm(admAlgoappBeanForm.getClientId())}" immediate="true" oncomplete="updateCurrentForm()"/>   
        <h:panelGroup styleClass="handleFileDlg3"></h:panelGroup>
        <script>
            #{app.fileDownload!=null?'downloadBtnWv.jq.show();downloadBtnWv2.jq.show()':'downloadBtnWv.jq.hide();downloadBtnWv2.jq.hide();'};
            //#{app.fileDownload!=null and !".png .jpg .gif .bmp".contains(app.fileDownload.name.substring(app.fileDownload.name.lastIndexOf(".")))?"$('.handleFileDlgImg').hide();":"$('.handleFileDlgImg').show();"};
            //#{app.fileDownload!=null?"alert('".concat(app.fileDownload.name.substring(app.fileDownload.name.lastIndexOf("."))).concat("')"):''};
            function handleFileUploadDlg(xhr, status, args) {
                var isValid = args.isValid;
                if (isValid) {
                    //$('.handleFileDlgImg').attr('src', '');
                    uploadFileWv.show();
                    updateHandleFileDlg();
                }
            }
            function sendEmail(email_destin, name_destin, email_msg, email_title) {
                sendEmailRc([{name: 'email_destin', value: email_destin}, {name: 'name_destin', value: name_destin}, {name: 'email_msg', value: email_msg}, {name: 'email_title', value: email_title}]);
            }
            function randomSort(list_field, amount_field, target_field) {
                randomSortRc([{name: 'list_field', value: list_field}, {name: 'amount_field', value: amount_field}, {name: 'target_field', value: target_field}]);
            }           
        </script>
        <script type="text/javascript">
            function start() {
                PF('statusDialog').show();
            }

            function stop() {
                PF('statusDialog').hide();
            }
            /*
            $('.myElement').bind('keypress', function(event){
                if(event.which === 13){
                    if(event.shiftKey){
                        $.tabPrev();
                    }
                    else{
                        $.tabNext();
                    }
                    return false;
                }
            });
            */            
        </script>             
    </h:form>
</html>
